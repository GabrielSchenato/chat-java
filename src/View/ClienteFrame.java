/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Cliente.Mensagem;
import Cliente.Online;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.nio.channels.FileChannel;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Gabriel Schenato <gabriel@uniplaclages.edu.br>
 */
public class ClienteFrame extends javax.swing.JFrame implements Runnable {

    private Mensagem mensagem;
    private Socket socket;
    private final Thread t;
    private ObjectOutputStream saida;
    private ObjectInputStream entrada;

    /**
     * Creates new form ClienteFrame
     */
    public ClienteFrame() {
        initComponents();
        conecta();
        try {
            this.saida = new ObjectOutputStream(this.socket.getOutputStream());
            this.entrada = new ObjectInputStream(this.socket.getInputStream());
        } catch (IOException ex) {
            Logger.getLogger(ClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        t = new Thread(this);
        t.start();
    }

    private void recebeMensagem(Mensagem mensagem) {
        if (mensagem.getArquivo() != null) {
            try {
                String caminhoSalvarArquivo = "";
                JFileChooser local = new JFileChooser();
                local.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                int retorno = local.showOpenDialog(null);
                if (retorno == JFileChooser.APPROVE_OPTION) {
                    caminhoSalvarArquivo = local.getSelectedFile().getAbsolutePath();
                } else {
                    return;
                }
                FileInputStream fileInputStream = new FileInputStream(mensagem.getArquivo());
                FileOutputStream fileOutputStream = new FileOutputStream(caminhoSalvarArquivo + "/" + mensagem.getArquivo().getName());

                FileChannel fin = fileInputStream.getChannel();
                FileChannel fout = fileOutputStream.getChannel();

                long size = fin.size();

                fin.transferTo(0, size, fout);
                this.txtAreaMensagensRecebidas.append(mensagem.getNome() + " enviou um arquivo chamado: " + mensagem.getArquivo().getName() + "\n");
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Mensagem.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Mensagem.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            if (mensagem.getNome() != null) {
                this.txtAreaMensagensRecebidas.append(mensagem.getNome() + " falou: " + mensagem.getMensagem() + "\n");
                this.txtAreaMensagensRecebidas.setCaretPosition(this.txtAreaMensagensRecebidas.getText().length());
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtNome = new javax.swing.JTextField();
        btnConectar = new javax.swing.JButton();
        btnSair = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        btnLimparSelecionado = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        listConectados = new javax.swing.JList<>();
        btnAtualizar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaMensagensRecebidas = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAreaMensagem = new javax.swing.JTextArea();
        btnEnviar = new javax.swing.JButton();
        btnLimpar = new javax.swing.JButton();
        btnAnexarArquivos = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Conectar"));

        txtNome.setToolTipText("Nome");
        txtNome.setName(""); // NOI18N

        btnConectar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/Icons/plug.png"))); // NOI18N
        btnConectar.setHorizontalTextPosition(JButton.LEFT);
        btnConectar.setText("Conectar");
        btnConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConectarActionPerformed(evt);
            }
        });

        btnSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/Icons/icon.png"))); // NOI18N
        btnSair.setHorizontalTextPosition(JButton.LEFT);
        btnSair.setText("Sair");
        btnSair.setEnabled(false);
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnConectar)
                .addGap(18, 18, 18)
                .addComponent(btnSair)
                .addContainerGap(168, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConectar)
                    .addComponent(btnSair))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Conectados"));

        btnLimparSelecionado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/Icons/wiping-swipe-for-floors.png"))); // NOI18N
        btnLimparSelecionado.setHorizontalTextPosition(JButton.LEFT);
        btnLimparSelecionado.setText("Limpar");
        btnLimparSelecionado.setEnabled(false);
        btnLimparSelecionado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparSelecionadoActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(listConectados);

        btnAtualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/Icons/reload.png"))); // NOI18N
        btnAtualizar.setHorizontalTextPosition(JButton.LEFT);
        btnAtualizar.setText("Atualizar");
        btnAtualizar.setEnabled(false);
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(btnLimparSelecionado)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAtualizar)
                .addGap(30, 30, 30))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLimparSelecionado)
                    .addComponent(btnAtualizar))
                .addGap(12, 12, 12))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Mensagens Recebidas"));

        txtAreaMensagensRecebidas.setEditable(false);
        txtAreaMensagensRecebidas.setColumns(20);
        txtAreaMensagensRecebidas.setRows(5);
        jScrollPane1.setViewportView(txtAreaMensagensRecebidas);

        txtAreaMensagem.setColumns(20);
        txtAreaMensagem.setRows(5);
        txtAreaMensagem.setEnabled(false);
        jScrollPane2.setViewportView(txtAreaMensagem);

        btnEnviar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/Icons/send.png"))); // NOI18N
        btnEnviar.setHorizontalTextPosition(JButton.LEFT);
        btnEnviar.setText("Enviar");
        btnEnviar.setEnabled(false);
        btnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarActionPerformed(evt);
            }
        });

        btnLimpar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/Icons/wiping-swipe-for-floors.png"))); // NOI18N
        btnLimpar.setHorizontalTextPosition(JButton.LEFT);
        btnLimpar.setText("Limpar");
        btnLimpar.setEnabled(false);
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        btnAnexarArquivos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/Icons/attached-file.png"))); // NOI18N
        btnAnexarArquivos.setHorizontalTextPosition(JButton.LEFT);
        btnAnexarArquivos.setText("Anexar Arquivo");
        btnAnexarArquivos.setEnabled(false);
        btnAnexarArquivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnexarArquivosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnLimpar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAnexarArquivos)
                        .addGap(13, 13, 13)
                        .addComponent(btnEnviar)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEnviar)
                    .addComponent(btnLimpar)
                    .addComponent(btnAnexarArquivos))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConectarActionPerformed
        String nomeCliente = this.txtNome.getText();

        if (!nomeCliente.isEmpty()) {
            this.mensagem = new Mensagem();
            this.mensagem.setAcao(Mensagem.CONECTAR);
            this.mensagem.setNome(nomeCliente);
            enviar(this.mensagem);
        }
    }//GEN-LAST:event_btnConectarActionPerformed

    private void erroConexao() {
        this.txtNome.setText("");
        JOptionPane.showMessageDialog(this, "Infelizmente não foi possível se conectar!\nTente com outro nome.");
    }

    private void sucessoConexao() {
        this.txtNome.setEditable(false);
        this.btnConectar.setEnabled(false);
        this.txtAreaMensagem.setEditable(false);

        this.btnSair.setEnabled(true);
        this.btnAtualizar.setEnabled(true);
        this.btnLimparSelecionado.setEnabled(true);
        this.txtAreaMensagem.setEnabled(true);
        this.txtAreaMensagem.setEditable(true);
        this.txtAreaMensagensRecebidas.setEnabled(true);
        this.btnEnviar.setEnabled(true);
        this.btnAnexarArquivos.setEnabled(true);
        this.btnLimpar.setEnabled(true);

        JOptionPane.showMessageDialog(this, "Seja bem-vindo ao chat " + this.mensagem.getNome() + "!");
    }

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        this.txtAreaMensagem.setText("");
    }//GEN-LAST:event_btnLimparActionPerformed

    private void btnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarActionPerformed
        String mensagemEnviada = this.txtAreaMensagem.getText();
        String nomeCliente = this.mensagem.getNome();

        this.mensagem = new Mensagem();

        if (this.listConectados.getSelectedIndex() > -1) {
            this.mensagem.setNomeClientePrivado((String) this.listConectados.getSelectedValue());
            this.mensagem.setAcao(Mensagem.ENVIAR_PARA_UM);
            this.listConectados.clearSelection();
        } else {
            this.mensagem.setAcao(Mensagem.ENVIA_PARA_TODOS);
        }

        if (!mensagemEnviada.isEmpty()) {
            this.mensagem.setNome(nomeCliente);
            this.mensagem.setMensagem(mensagemEnviada);
            this.txtAreaMensagensRecebidas.append("Você escreveu: " + mensagemEnviada + "\n");

            enviar(this.mensagem);
        }

        this.txtAreaMensagem.setText("");
    }//GEN-LAST:event_btnEnviarActionPerformed

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        sair();
    }//GEN-LAST:event_btnSairActionPerformed

    private void btnAnexarArquivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnexarArquivosActionPerformed
        String caminhoArquivo = "";
        JFileChooser arquivo = new JFileChooser();
        int retorno = arquivo.showOpenDialog(null);
        if (retorno == JFileChooser.APPROVE_OPTION) {
            caminhoArquivo = arquivo.getSelectedFile().getAbsolutePath();
            String mensagem = this.txtAreaMensagem.getText();
            String nomeCliente = this.mensagem.getNome();
            File file = new File(caminhoArquivo);
            this.mensagem = new Mensagem();

            if (this.listConectados.getSelectedIndex() > -1) {
                this.mensagem.setNomeClientePrivado((String) this.listConectados.getSelectedValue());
                this.mensagem.setAcao(Mensagem.ENVIAR_PARA_UM);
                this.listConectados.clearSelection();
            } else {
                this.mensagem.setAcao(Mensagem.ENVIA_PARA_TODOS);
            }
            this.mensagem.setNome(nomeCliente);
            this.mensagem.setMensagem(mensagem);
            this.mensagem.setArquivo(file);
            this.txtAreaMensagensRecebidas.append("Você enviou um arquivo: " + file.getName() + "\n");

            enviar(this.mensagem);

            this.txtAreaMensagem.setText("");
        }
    }//GEN-LAST:event_btnAnexarArquivosActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

        if (JOptionPane.showConfirmDialog(null, "Você realmente deseja sair do chat?") == JOptionPane.OK_OPTION) {
            sair();
        }
    }//GEN-LAST:event_formWindowClosing

    private void btnLimparSelecionadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparSelecionadoActionPerformed
        this.listConectados.clearSelection();
    }//GEN-LAST:event_btnLimparSelecionadoActionPerformed

    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
        this.mensagem.setAcao(Mensagem.CLIENTES_ONLINE);
        enviar(mensagem);
    }//GEN-LAST:event_btnAtualizarActionPerformed

    private void conecta() {
        try {
            int porta = 2018;
            this.socket = new Socket("localhost", porta);

        } catch (IOException e) {
            System.out.println("IOException: " + e);
        }
    }

    private void sair() {
        Mensagem mensagem = new Mensagem();
        if (this.mensagem != null) {
            mensagem.setNome(this.mensagem.getNome());
        }

        mensagem.setAcao(Mensagem.DESCONECTAR);
        enviar(mensagem);
    }

    private void enviar(Mensagem mensagem) {
        try {
            this.saida.writeObject(mensagem);
        } catch (IOException ex) {
            Logger.getLogger(ClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    @Override
    public void run() {

        try {
            while (true) {
                final Object object = this.entrada.readObject();
                if (object instanceof Online) {
                    Online online = (Online) object;
                    this.listConectados.setListData(online.getClientesOnlineArray());
                } else {
                    Mensagem mensagem = (Mensagem) object;
                    int acao = mensagem.getAcao();

                    switch (acao) {
                        case Mensagem.CONECTAR:
                            mensagem.setAcao(Mensagem.CLIENTES_ONLINE);
                            break;
                        case Mensagem.DESCONECTAR:
                            System.exit(0);
                            return;
                        case Mensagem.ENVIAR_PARA_UM:
                            recebeMensagem(mensagem);
                            break;
                        case Mensagem.CONECTADO:
                            sucessoConexao();
                            break;
                        case Mensagem.DESCONECTADO:
                            erroConexao();
                            break;
                        default:
                            break;
                    }
                }

            }

        } catch (IOException e) {
            System.out.println("Ocorreu uma Falha... .. ."
                    + " IOException: " + e);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClienteFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnexarArquivos;
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JButton btnConectar;
    private javax.swing.JButton btnEnviar;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnLimparSelecionado;
    private javax.swing.JButton btnSair;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> listConectados;
    private javax.swing.JTextArea txtAreaMensagem;
    private javax.swing.JTextArea txtAreaMensagensRecebidas;
    private javax.swing.JTextField txtNome;
    // End of variables declaration//GEN-END:variables

}
